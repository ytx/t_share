---
- name: Deploy T-SHARE Application
  hosts: all
  become: yes
  vars_files:
    - "../secrets/{{ group_names[0] }}_secrets.yml"

  pre_tasks:
    - name: Update package cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

  tasks:
    # System Setup
    - name: Install required packages
      apt:
        name:
          - docker.io
          - docker-compose
          - git
          - curl
          - ufw
          - nginx
        state: present

    - name: Start and enable Docker
      systemd:
        name: docker
        state: started
        enabled: yes

    # Create swap file early for build processes
    - name: Create swap file early
      block:
        - name: Check if swap exists
          command: swapon --show
          register: swap_check
          changed_when: false
          failed_when: false

        - name: Create 1GB swap file for builds
          shell: |
            dd if=/dev/zero of={{ swap_file_path }} bs=1M count=1024
            chmod 600 {{ swap_file_path }}
            mkswap {{ swap_file_path }}
            swapon {{ swap_file_path }}
            echo "{{ swap_file_path }} none swap sw 0 0" >> /etc/fstab
          when: swap_check.stdout == ""

    - name: Create application user
      user:
        name: "{{ app_user }}"
        system: yes
        shell: /bin/bash
        home: "{{ app_dir }}"
        groups: docker
        append: yes

    - name: Create application directory
      file:
        path: "{{ app_dir }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: '0755'

    - name: Create data directories
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: '0755'
      loop:
        - "{{ data_dir }}"
        - "{{ ssl_cert_dir }}"

    # SSL Certificate Setup
    - name: Copy SSL certificates
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: root
        group: root
        mode: '{{ item.mode }}'
      loop:
        - { src: "{{ ssl_cert_source_file }}", dest: "{{ ssl_cert_file }}", mode: '0644' }
        - { src: "{{ ssl_ca_source_file }}", dest: "{{ ssl_ca_file }}", mode: '0644' }
        - { src: "{{ ssl_key_source_file }}", dest: "{{ ssl_key_file }}", mode: '0600' }

    # Application Code
    - name: Remove existing application directory completely
      shell: |
        rm -rf {{ app_dir }}
        mkdir -p {{ app_dir }}

    - name: Clone application repository with latest code
      shell: |
        git clone --depth 1 --branch {{ git_branch }} {{ git_repo_url }} {{ app_dir }}
        cd {{ app_dir }}
        echo "Cloned commit: $(git rev-parse HEAD)"
        echo "Cloned at: $(date)"
        chown -R {{ app_user }}:{{ app_group }} {{ app_dir }}

    # Production Environment Files
    - name: Generate production docker-compose file
      template:
        src: "../templates/docker-compose.prod.yml.j2"
        dest: "{{ app_dir }}/docker-compose.prod.yml"
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: '0644'


    # Nginx Configuration
    - name: Generate Nginx configuration
      template:
        src: "../templates/nginx.conf.j2"
        dest: "/etc/nginx/sites-available/{{ app_name }}"
        owner: root
        group: root
        mode: '0644'

    - name: Enable Nginx site
      file:
        src: "/etc/nginx/sites-available/{{ app_name }}"
        dest: "/etc/nginx/sites-enabled/{{ app_name }}"
        state: link

    - name: Remove default Nginx site
      file:
        path: "/etc/nginx/sites-enabled/default"
        state: absent

    - name: Test Nginx configuration
      command: nginx -t
      changed_when: false

    - name: Start and enable Nginx
      systemd:
        name: nginx
        state: started
        enabled: yes


    # Systemd Service
    - name: Generate systemd service file
      template:
        src: "../templates/systemd/t-share.service.j2"
        dest: "/etc/systemd/system/{{ app_name }}.service"
        owner: root
        group: root
        mode: '0644'
      notify:
        - reload systemd
        - restart application

    # Firewall Configuration
    - name: Configure UFW firewall
      block:
        - name: Allow OpenSSH
          ufw:
            rule: allow
            name: OpenSSH

        - name: Allow HTTP
          ufw:
            rule: allow
            port: '80'

        - name: Allow HTTPS
          ufw:
            rule: allow
            port: '443'

        - name: Enable UFW
          ufw:
            state: enabled
            policy: deny

    # Application Deployment
    - name: Clean up existing Docker resources completely
      shell: |
        cd {{ app_dir }}
        # Stop and remove all containers
        sudo -u {{ app_user }} docker-compose -f docker-compose.prod.yml down -v || true
        # Remove specific T-SHARE images to force rebuild
        docker rmi t-share-frontend t-share-backend || true
        # Remove volumes (but preserve postgres data for regular deploy)
        docker volume rm t-share_node_modules || true
        # Clean build cache
        docker builder prune -f || true
        docker system prune -f || true

    - name: Build and start application with fresh containers
      shell: |
        cd {{ app_dir }}
        echo "Building application at $(date)"
        sudo -u {{ app_user }} docker-compose -f docker-compose.prod.yml build --no-cache --pull
        sudo -u {{ app_user }} docker-compose -f docker-compose.prod.yml up --force-recreate -d
        echo "Application started at $(date)"
      environment:
        DOCKER_BUILDKIT: 1
        NODE_OPTIONS: "--max-old-space-size={{ node_max_memory }}"

    - name: Wait for database to be ready
      shell: |
        cd {{ app_dir }}
        timeout 60 bash -c 'until sudo docker exec t-share-postgres pg_isready -U {{ db_user }}; do sleep 2; done'

    - name: Run database migrations
      shell: |
        cd {{ app_dir }}
        sudo docker exec --user root t-share-backend npx prisma migrate deploy

    - name: Install seed dependencies
      shell: |
        cd {{ app_dir }}
        sudo docker exec --user root t-share-backend npm install -g ts-node || \
        sudo docker exec t-share-backend npm install ts-node || true
      ignore_errors: yes

    - name: Seed database with initial data (if needed)
      shell: |
        cd {{ app_dir }}
        if sudo docker exec --user root t-share-backend npx prisma db seed 2>/dev/null; then
          echo "Database seeded successfully"
        else
          echo "Seed script failed, creating admin user manually..."
          # Generate password hash using bcrypt
          ADMIN_HASH=$(sudo docker exec --user root t-share-backend node -e "const bcrypt = require('bcryptjs'); bcrypt.hash('admin123', 10).then(hash => console.log(hash));" 2>/dev/null)
          sudo docker exec t-share-postgres psql -U {{ db_user }} -d {{ db_name }} -c "
          INSERT INTO users (username, email, password_hash, display_name, is_admin, approval_status, applied_at, created_at, updated_at)
          VALUES (
            'admin@template-share.com',
            'admin@template-share.com',
            '$ADMIN_HASH',
            'Administrator',
            true,
            'approved',
            NOW(),
            NOW(),
            NOW()
          ) ON CONFLICT (email) DO NOTHING;
          " > /dev/null 2>&1
          echo "Admin user created (username: admin@template-share.com, password: admin123)"
        fi

  handlers:
    - name: reload systemd
      systemd:
        daemon_reload: yes

    - name: restart application
      systemd:
        name: "{{ app_name }}"
        state: restarted
        enabled: yes

  post_tasks:
    - name: Wait for application to be ready
      uri:
        url: "http://localhost:{{ backend_port }}/api/health"
        method: GET
        status_code: 200
      register: health_check
      until: health_check.status == 200
      retries: 30
      delay: 10

    - name: Display deployment status
      debug:
        msg: |
          🎉 T-SHARE deployment completed successfully!

          🌐 Application URL: {{ app_url }}
          📊 Environment: {{ environment }}
          🔧 Backend Health: {{ health_check.json.status if health_check.json is defined else 'OK' }}

          📱 Access your application at: {{ app_url }}
services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: {{ app_name }}-postgres
    environment:
      POSTGRES_DB: {{ db_name }}
      POSTGRES_USER: {{ db_user }}
      POSTGRES_PASSWORD: {{ db_password }}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    ports:
      - "{{ postgres_port }}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U {{ db_user }}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # Backend API Server
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: {{ app_name }}-backend
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://{{ db_user }}:{{ db_password }}@postgres:5432/{{ db_name }}
      JWT_SECRET: {{ jwt_secret }}
      GOOGLE_CLIENT_ID: {{ google_client_id | default('') }}
      GOOGLE_CLIENT_SECRET: {{ google_client_secret | default('') }}
      PORT: 3101
      CORS_ORIGIN: {{ app_url }}
    ports:
      - "{{ backend_port }}:3101"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3101/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network

  # Frontend React Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: {{ app_name }}-frontend
    environment:
      NODE_ENV: production
      REACT_APP_API_URL: {{ app_url }}/api
    ports:
      - "{{ frontend_port }}:80"
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network

volumes:
  postgres_data:
    driver: local

networks:
  app-network:
    driver: bridge